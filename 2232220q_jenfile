pipeline {
    agent any
    stages {
        stage('2232220q_OP_S1') {
            steps {
                script {
                    echo "Removing old backup image..."
                    sh 'docker image rm -f 2232220q_uatsvr_image || true'

                    echo "Creating new backup image..."
                    sh 'docker commit 2232220q_uatsvr 2232220q_uatsvr_image'

                    sh '''
                        puppet resource file /tmp/2232220q ensure=absent force=true;
                        puppet resource file /tmp/2232220q ensure=directory;
                        cd /tmp/2232220q;
                        git clone https://github.com/AmeerMus/2232220q_op_repo.git;
                        targets=2232220q_uatsvr.localdomain;
                        locate_script='/tmp/2232220q/2232220q_op_repo/2232220q_script';
                        bolt script run $locate_script -t $targets -u clientadm -p 2232220q --no-host-key-check --run-as root;
                    '''

                    echo "2232220q_OP_S1: uat web server is backup and updated"
                }
            }
        }

        stage('2232220q_OP_S2') {
            steps {
                script {
                    def resultFile = "/tmp/uatsvr-result-file"

                    echo "Executing web test for UAT server..."
                    sh "curl -Is http://localhost:${uatsvrPort} | head -n 1 > ${resultFile}"
                    def result = sh(script: "cat ${resultFile}", returnStdout: true).trim()

                    if (result.contains("HTTP/1.1 200 OK")) {
                        echo "2232220q_OP_S2: uat svr is running after update"
                    } else {
                        echo "2232220q_OP_S2: uat svr fails"
                        error("UAT web server test failed. Aborting pipeline.")
                    }
                }
            }
        }

        stage('2232220q_OP_S3') {
            steps {
                input ('2232220q_OP_S3: Proceed with Stress test on UAT web server?')
 
            }
        }

        stage('2232220q_OP_S4') {
            steps {
                echo "2232220q_OP_S4: Stress test result is good"
            }
        }

        stage('2232220q_OP_S5') {
            steps {
                input('2232220q_OP_S5: Deploy new update to prod web server?')

            }
        }

        stage('2232220q_OP_S6') {
            steps {
                script {
                    sh 'docker image rm -f 2232220q_prodsvr_image || true'

                    sh 'docker commit 2232220q_prodsvr 2232220q_prodsvr_image'

                    sh '''
                        puppet resource file /tmp/2232220q ensure=absent force=true;
                        puppet resource file /tmp/2232220q ensure=directory;
                        cd /tmp/2232220q;
                        git clone https://github.com/AmeerMus/2232220q_op_repo.git;
                        targets=2232220q_prodsvr.localdomain;
                        locate_script='/tmp/2232220q/2232220q_op_repo/2232220q_script';
                        bolt script run $locate_script -t $targets -u clientadm -p 2232220q --no-host-key-check --run-as root;
                    '''

                    echo "2232220q_OP_S6: prod web server is backup and updated"
                }
            }
        }

        stage('2232220q_OP_S7') {
            steps {
                script {
                    def prodsvrPort = "32600"
                    def resultFile = "/tmp/prodsvr-result-file"

                    echo "Executing web test for PROD server..."
                    sh "curl -Is http://localhost:${prodsvrPort} | head -n 1 > ${resultFile}"
                    def result = sh(script: "cat ${resultFile}", returnStdout: true).trim()

                    if (result.contains("HTTP/1.1 200 OK")) {
                        echo "2232220q_OP_S7: Production website is operational"
                    } else {
                        echo "2232220q_OP_S7: Production website failed!"

                        def v2 = input (message: 'Action'
                        parameters:[choice(name:'Action',choices:['Deploy to Production Environment',Rollback'])]
                        )

                        if (action == "Trigger roll back") {
                            echo "2232220q_OP_S7: Production website is rolling back"
                        } else {
                            echo "2232220q_OP_S7: Troubleshooting of Production website is in progress"
                        }
                    }
                }
            }
        }
    }
}
